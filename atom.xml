<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zenithal Hourly Radio</title>
  
  
  <link href="https://blog.zenithal.me/atom.xml" rel="self"/>
  
  <link href="https://blog.zenithal.me/"/>
  <updated>2021-05-15T18:11:18.739Z</updated>
  <id>https://blog.zenithal.me/</id>
  
  <author>
    <name>Zenithal</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将 Kindle 作为状态屏</title>
    <link href="https://blog.zenithal.me/2021/05/16/Kindle-As-A-Status-Screen/"/>
    <id>https://blog.zenithal.me/2021/05/16/Kindle-As-A-Status-Screen/</id>
    <published>2021-05-15T18:01:56.000Z</published>
    <updated>2021-05-15T18:11:18.739Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/kindle-grafana.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近又开始摸鱼。很久以前有个通知中心的想法（目前这个想法在另一个项目中实现），主要是我注意到我拥有的屏幕并不少（手机平板小电脑Kindle），那么怎么显示这些通知呢；在想这个想法的时候，突然发现，我的 Kindle 还没法自由掌控呢，于是我开始折腾。</p><p>然后有幸越狱（最近刚出了一个利用方式，影响范围还很广，很久没开机的 Kindle 可能都可以利用），有幸拿到 ssh（指中途被自动更新打断差点吓死），有幸摸清了一些服务，有幸找到网络上一系列 <strong>边边角角</strong> 的技术讨论，结合自己一些 Linux 使用经验，整理了以下路径。</p><p>此处是博文，本项目地址在 <a href="https://github.com/ZenithalHourlyRate/kindle">https://github.com/ZenithalHourlyRate/kindle</a></p><h2 id="kindle-越狱-ssh"><a href="#kindle-越狱-ssh" class="headerlink" title="kindle 越狱/ssh"></a>kindle 越狱/ssh</h2><p>这个参考 <a href="https://bookfere.com/post/tag/kindle%E8%B6%8A%E7%8B%B1">https://bookfere.com/post/tag/kindle%E8%B6%8A%E7%8B%B1</a> 即可。</p><p>做完这步之后，你能熟练地通过 usb 来 ssh 上你的机器。通过 wifi 的方式需要在更改 iptables 之后做到（清华校园网特性）</p><p>我的体验就几点</p><ul><li>在拿出吃灰的 Kindle 查看固件时以及走流程之后直到 Hotfix，都要开启飞行模式！不然自动更新了都没法哭；</li><li>我在 Hotfix 并装了几个插件后，立即被自动更新了，KUAL 就打开失败了，然后只能重装了一次插件（应该是自动更新覆盖了一些文件）；</li><li>要装这个插件：usbnet。首先要使它开机自启「Enable SSH at boot」，这很重要！这是我们之后长期的调试方式！注意到 KUAL 中 usbnet 的「Toggle USBNetwork 」，这个是用来切换模式，USBMS 和 USBNET，前者就是插上以后能挂载盘（USB Mass Storage），后者插上去以后 <code>ip l</code> 多出一个新的 interface（具体名称请自己替换），然后可以这样访问机器<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip l set enp0s20f0u2 up</span><br><span class="line">ip a a 192.168.15.1/24 dev enp0s20f0u2</span><br><span class="line">ssh root@192.168.15.244</span><br></pre></td></tr></table></figure></li><li>这种模式切换是跨启动的，所以说在切换了一次以后，查询一下状态，之后便不用调整了；不过建议多切换一下模式，体验程序的工作方式</li><li>KUAL USBNET 中显示的状态是当前的状态，而不是点击以后进入的状态</li><li>此时先不要开换用 openssh，继续使用 dropbear，等到换了端口以后再换服务器</li><li>装一个禁止休眠的 helper，在休眠后 usb网卡会掉线，从而 ssh 掉线</li></ul><p>然后一些评论：</p><ul><li>网上有说弹出但不物理拔出 Kindle 来启动 usbnet 的方法，这个方法在 Linux 下似乎不是很好操作</li><li>有很多同学热衷于装很多插件，但实际上在 kindle 自己的服务框架内跑服务，是非常吃内存的，在 kindle 完全开机后，我只剩余100M以下的内存，但在关掉 kindle 自己的框架以后，我能剩余接近 300M 的内存。举个例子，自定义屏保插件在每次屏保时会消耗 30~80M 的内存，还不会自动 GC（当时我拿着 <code>top</code> 监控，就怕 oom 了）</li><li>作为 Linux 用户，我们的最终目的就是要干掉 Kindle 的主服务，然后跑自己的服务。网上有一些 chroot 装 Arch Linux/Debian 的帖子，我为内存而担心啊。</li><li>不过我们不要完全抛弃 Kindle 的主服务，比如其提供的亮度调整，Wifi 连接，还是能帮助我们很多的。</li><li>经过探索，发现这个内核不支持 IPv6，也不支持 tun/tap ，对于不能进入我的内网，我表示遗憾。</li></ul><h2 id="调整-IP-桌子"><a href="#调整-IP-桌子" class="headerlink" title="调整 IP 桌子"></a>调整 IP 桌子</h2><p>注意到 <code>/etc/upstart/network.conf</code> 中有 <code>iptables-restore &lt; /etc/sysconfig/iptables</code>，我们查看文件可见几个关键规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line"></span><br><span class="line"># TCP handling. Allow incoming TCP TPH on WAN</span><br><span class="line">-A INPUT -i wlan0 -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"># Usbnet. All traffic allowed.</span><br><span class="line">-A INPUT -i usb0 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># ICMP. Allow only responses to local connections</span><br><span class="line">-A INPUT -p icmp -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p>我们需要调整一些规则，比如放行我的 ssh 端口（usbnet 这个插件在启动时会自己加规则，所以不需要给 22 加规则），比如放行 icmp。注意，在调整前建议备份。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -i wlan0 -p tcp -m tcp --dport &lt;my_ssh_port&gt; -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="更改-ssh-端口"><a href="#更改-ssh-端口" class="headerlink" title="更改 ssh 端口"></a>更改 ssh 端口</h2><p>重启或手动调整 iptables 规则，确保这时候我们的桌子是正确的。</p><p>这时候修改 <code>/mnt/us/usbnet/etc/sshd_config</code> （该配置不影响 dropbear） 中的端口为 <code>&lt;my_ssh_port&gt;</code>，然后在命令行中手动启动 <code>/usr/sbin/sshd</code> ，尝试是否能连接，如果能连接，则在 KUAL USBNET 中将默认启用的 ssh 设置为 openssh。</p><p>调整后建议重启以验证并再次尝试 ssh，确保服务如预期进行。</p><h2 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h2><p>创建 <code>/etc/upstart/ddns</code> 的脚本（记得 <code>chmod +x</code>）（或者可以放在其他位置，比如 <code>/usr/local/bin/</code>，但不能放在 <code>/tmp/root</code> 中），内容为你的 DDNS 提供商的脚本，之后在 <code>/etc/crontab/root</code> 创建 <code>*/5 * * * * /etc/upstart/ddns</code> 的项目。</p><p>建议先手动运行相关脚本，测试脚本的正确性。</p><h2 id="swapfile"><a href="#swapfile" class="headerlink" title="swapfile"></a>swapfile</h2><p>由于内存捉急，我开了一个 swapfile。注意，该文件不能在根 <code>/</code> 下！根下空间不多。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/mnt/base-us/swapfile bs=1M count=200</span><br><span class="line">mkswap /mnt/base-us/swapfile</span><br><span class="line">swapon /mnt/base-us/swapfile</span><br></pre></td></tr></table></figure><p>然后在 <code>/etc/fstab</code> 的最后加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;mnt&#x2F;base-us&#x2F;swapfile none swap defaults 0 0</span><br></pre></td></tr></table></figure><p>但是观测发现 Kindle 并不会自己挂载 swap，所以我们需要一个 helper 在开机后执行 <code>swapon -a</code>，这个参考 <code>zhelper</code> 文件夹（还没写）。安装方法就是将 <code>zhelper</code> 目录放在 <code>/mnt/base-us/extensions</code> 目录下。</p><h2 id="状态屏"><a href="#状态屏" class="headerlink" title="状态屏"></a>状态屏</h2><p>这个的主要灵感是 <a href="https://github.com/mpetroff/kindle-weather-display/blob/master/kindle/display-weather.sh">https://github.com/mpetroff/kindle-weather-display/blob/master/kindle/display-weather.sh</a>，发现了其中有展示图片的方法。</p><p>目前的架构是，Kindle的主服务框架依然开机自启，以便我们进行必要的调整（比如连接 Wifi，调整亮度），我们在 KUAL 中通过 Helper 启用该模式（会关闭电源管理），而这个文件的更新是通过<strong>服务器 scp 到 Kindle</strong>上实现的 （约定位置为 <code>/tmp/screen.png</code>），并触发相关渲染任务（当然也可以 Kindle 轮询实现，请 PR）。由于主服务未关，我们可以随时切换到主服务中进行调整。</p><p>这样在 Kindle 闲置时能自动 <strong>播放</strong> 屏保，非常有意思（不过也相对耗电了）</p><p>当然我们也提供了关闭主服务(Close Framework)的方法，如果想要在重启主服务，需要重启或 <code>ssh kindle initctl start framework</code>。</p><p>该服务的安装方法是将 <code>screen/extensions/screen</code> 文件夹放在 <code>/mnt/us/extensions</code> 文件夹下；将 <code>screen/screen</code> 文件夹放在 <code>/mnt/us/</code> 文件夹下。</p><p>由于图片的收集和渲染是服务端实现的，我们只需要保证传输到 Kindle 上的格式符合<a href="https://www.mobileread.com/forums/showthread.php?t=276225">其需求</a>，我们提供了一个帮助脚本 <code>scripts/png8.sh</code> ，方便转换图片。需要自行修改脚本中的分辨率。</p><p>同时提个了一个样例部署脚本 <code>scripts/server.sh</code>。</p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li>在翻 <code>/etc/network/interfaces</code> 发现 <code>bnep0</code>，注意到被闲置的蓝牙</li><li><code>/var/log/messages</code> 是整个系统启动的 log，可以用这个查看 Kindle 的服务启动顺序。</li><li>服务的错误信息都在 <code>/tmp/some\_app.err</code> 中</li><li>类似于 <code>systemctl</code>，Kindle 有 <code>initctl</code></li></ul><h2 id="未来可能的方向"><a href="#未来可能的方向" class="headerlink" title="未来可能的方向"></a>未来可能的方向</h2><ul><li>安装 Debian/Arch Linux</li><li>更换内核，开启 IPv6 / TUNTAP 的支持</li><li>给 Kindle 上蓝牙组网</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/kindle-grafana.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近又开始摸鱼。很久以前有个通知中心的想法（目前</summary>
      
    
    
    
    
    <category term="configuration" scheme="https://blog.zenithal.me/tags/configuration/"/>
    
    <category term="security" scheme="https://blog.zenithal.me/tags/security/"/>
    
    <category term="tech" scheme="https://blog.zenithal.me/tags/tech/"/>
    
    <category term="kindle" scheme="https://blog.zenithal.me/tags/kindle/"/>
    
  </entry>
  
  <entry>
    <title>从Ant Design GitHub失窃案谈开去：国内有可用的2FA吗</title>
    <link href="https://blog.zenithal.me/2021/02/15/Ant-Design-GitHub-2FA-unavailable-in-China/"/>
    <id>https://blog.zenithal.me/2021/02/15/Ant-Design-GitHub-2FA-unavailable-in-China/</id>
    <published>2021-02-15T10:16:56.000Z</published>
    <updated>2021-05-15T18:02:53.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>本文是 <a href="https://canokeys.org/">https://canokeys.org</a> 或（Telegram: @canokeys）的硬广，但本文并非 Canokeys 官方发布。</p><h1 id="事件本身"><a href="#事件本身" class="headerlink" title="事件本身"></a>事件本身</h1><p>2021-02-15，UTC+8，早晨的群友发现 <a href="https://ant.design/">https://ant.design</a> 404，后官方推特向GitHub反馈表明帐号失窃，相关项目被转移。</p><h1 id="群友讨论"><a href="#群友讨论" class="headerlink" title="群友讨论"></a>群友讨论</h1><p>不少群友在感叹相关人员水平之后（<a href="https://github.com/alibaba/nacos/issues/4593">延伸材料</a>），灵魂发问：为啥该失窃员工没有对帐号开启2FA（多重因素验证）呢。我的简单回答是：很难，或者没法合法开启。本文不探讨「相关人员水平」或「相关组织管理（指组织强制所有成员开启2FA）」的问题，我们来探讨一下「国内的2FA可用性」。</p><h2 id="GitHub-2FA"><a href="#GitHub-2FA" class="headerlink" title="GitHub 2FA"></a>GitHub 2FA</h2><p>我们知道，现代的登录系统，除了密码，还需要通过其他的验证方式来验证「登录者是帐号所有者」，例如「SMS验证码」，「验证应用（Authenticator App）」，「安全密钥」等，这些验证方式自然也被GitHub所使用，但是，国内的GitHub用户真的能「合法、廉价、易用」地使用相关方式吗。</p><ul><li>SMS验证码：在GitHub该界面中，没有+86用户的选项，而要获取其他区号，除了少部分人（相对于GitHub国内用户基数），基本无法「合法」做到。</li><li>验证应用（Authenticator App）：前有Google Authenticator后有Microsoft Authenticator，更别说开源的Authy，andOTP等工具，但是，除了Google Play商店或者F-droid，我们基本无法在国内的应用商店中找到这些软件，就算找到了，相关软件也需要Google的服务框架（例如小米应用商店中的Microsoft Authenticator），所以这不「易用」，甚至不「合法」，而有些软件是需要搭配硬件密钥使用的（Yubikey，Nitrokey，Google Titan），这些并不「廉价」，甚至进口这些硬件密钥似乎也不「合法」</li><li>安全密钥：也就上文提到的那些硬件密钥，同时还有 Solokeys，U2F-zero 等相关密钥，但这些即不「廉价」（一个用户需要多个密钥用作备份），也不能「大批量购买」（对企业用户来说，这是最大的阻碍，而Ant Design是企业用户）</li></ul><h2 id="糟糕透顶的国内密码学实践"><a href="#糟糕透顶的国内密码学实践" class="headerlink" title="糟糕透顶的国内密码学实践"></a>糟糕透顶的国内密码学实践</h2><p>上述问题，可以推广到大量实践了2FA的应用。</p><p>登录认证，作为基础设施中的基础设施，是应该有一套完整的实践的，但现在各个环节缺失，帐号的安全性如何保障？</p><p>登录认证，作为基础设施中的基础设施，是应该有一套「自主可控」的软件与硬件系统的（这里是严肃的「自主可控」，而不是只是外国软件套皮）。比如说，国内的企业会信任Yubikey吗，会信任Nitrokey吗，依赖于Google Play的「验证应用」能被国内用户、国内企业使用吗。</p><p>国内目前的相关2FA实践是手机验证码，但似乎这成了必选项，而不是可选项，理想中的2FA应该是其他的验证因素也足够验证，这样大家为「手机不在身边」，「手机号被盗以至于银行卡被盗刷」而烦恼。另外值得一提的是「网银盾」这种2FA，需要更现代、开源的实现，比如WebAuthn，而不是国产不知名，无法审核的插件。</p><h1 id="国内的2FA解决方案"><a href="#国内的2FA解决方案" class="headerlink" title="国内的2FA解决方案"></a>国内的2FA解决方案</h1><p>CanoKey由清华大学的一些老师/学生（同时也是开源社区的大佬）所写，有软硬件（包括PCB设计）皆开源的stm32版本，也有使用密码学芯片的发售版本（其核心功能一致，只是速度较大差别），可供国内广大用户、企业选用，满足其硬件密钥乃至安全性需求。</p><p>这是「合法」的（参考《密码法》），「廉价」的（比市场同类商品价格低，功能更加丰富），「易用」的（相关软件已经发布）。</p><p>同时，用户可以体验<a href="https://github.com/canokeys/canokey-core#virt-card-usbip">虚拟硬件密钥</a>，进行构建/购买前的测试与游玩！同时也欢迎用户参与核心代码库的贡献，您的贡献可能出现在下一版的发售中！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;&lt;p&gt;本文是 &lt;a href=&quot;https://canokeys.org/&quot;&gt;https://canokeys.org&lt;/</summary>
      
    
    
    
    
    <category term="security" scheme="https://blog.zenithal.me/tags/security/"/>
    
    <category term="misc" scheme="https://blog.zenithal.me/tags/misc/"/>
    
    <category term="opinion" scheme="https://blog.zenithal.me/tags/opinion/"/>
    
  </entry>
  
  <entry>
    <title>Link Preview May Reset Your Password</title>
    <link href="https://blog.zenithal.me/2020/12/01/Link-Preview-May-Reset-Your-Password/"/>
    <id>https://blog.zenithal.me/2020/12/01/Link-Preview-May-Reset-Your-Password/</id>
    <published>2020-12-01T08:50:46.000Z</published>
    <updated>2020-12-01T11:35:01.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>Link preview provided as a feature by webmail/clients such as Outlook or IM like Telegram may cause unexpected behavior like unwanted account register confirming, automatic mailing list subscribing or even infinite password resetting through links with special functionality.</p><h1 id="The-Story-and-Other-Stories"><a href="#The-Story-and-Other-Stories" class="headerlink" title="The Story and Other Stories"></a>The Story and Other Stories</h1><h2 id="Official-Account-Used-For-Registering"><a href="#Official-Account-Used-For-Registering" class="headerlink" title="Official Account Used For Registering"></a>Official Account Used For Registering</h2><p>One morning, I opened OUR mailbox, and found an address validation letter with a confirming link lying there. Spam, I thought, as this email address is used as a official account, no one in our organizaiton would use it for personal account registration, but right before I close this mailbox, I was suddenly reminded of something.</p><p>The day before this morning, we happily tested a new functionality provided by the webmail of Outlook – Link Preview. Well since we are already modern now, with modern front-end and modern webpage, what’s wrong with link preview? This is what we all expected! This is how modern front-end should be like!</p><p>But wait, would link preview visit every link in this email? If it does, right after I opened this email, the validation would be done!</p><p>Even worse, I cannot check whether the validation is over since the registered account is not in my hand and I dare not click on that confirming link.</p><p>After some discussion within our org, we think that there may be some allow lists that prevent the preview of certain sites, but if the list is not a list of REGEX, when I register the account of popular platforms, the link would still be previewed.</p><p>So the registered account still hangs there, we do not know its status, and bad thing can be done with that account.</p><h2 id="Other-Stories"><a href="#Other-Stories" class="headerlink" title="Other Stories"></a>Other Stories</h2><p>After I discovered this issue, I come to a broader concern on similar issues. And after posting this issue among my friends, more stories are collected and more exploits can be done.</p><p>One story is that one user of Telegram <em>gmailbot</em> received a validation letter one day, and after they opened that bot, the message of confirmation success was received right away. The mechanism of preview of Telegram is to preview every first link of one message unless the user cancels that.</p><p>Another story is that one user of one email provider used that email for some account registering, and one day they forgot their password. For that site, password reset are done by a special link sent to the email address associated with that account, but for the sake of security, the email provider checks every link in the email(common behavior of big providers, maybe), hence the password reset link would have been accessed once when the user sees the email, and the reset cannot be done successfully. Since this security check is a black box and unrevealed to that user, the user tried almost infinitely and asked the admin of that site to debug.</p><h1 id="Spamming-DoS-Fake-Identity-Misbehavior-and-Even-More"><a href="#Spamming-DoS-Fake-Identity-Misbehavior-and-Even-More" class="headerlink" title="Spamming, DoS, Fake Identity, Misbehavior and Even More"></a>Spamming, DoS, Fake Identity, Misbehavior and Even More</h1><ol><li>When subscribing a mailing list on web, a confirmation letter would be sent, in some forms it asks you to reply to that email containing certain string, but mostly it shows you a validation link. This may be used for spamming hence DoS of one account; it can also be used for DoS of one mailing list as all subscribers are ‘valid’.</li><li>When you upload a PGP public key to a keyserver like OpenPGP, it sends validation letter. Hence fake public key of one identity can be made with confirmation, and without revocation.</li><li>As the last story above indicates, password reset can never be done, or done by the provider.</li><li>When there are one-time special functional links(common behavior), and the provider/client automatically access that link in any form, there are unexpected behaviors. </li></ol><h1 id="Related-Report"><a href="#Related-Report" class="headerlink" title="Related Report"></a>Related Report</h1><p>Ref to this post <a href="https://www.macrumors.com/2020/10/26/link-previews-may-lead-to-security-vulnerabilities/">https://www.macrumors.com/2020/10/26/link-previews-may-lead-to-security-vulnerabilities/</a></p><p>It talks about information leaking and malicious payload, while I am from the perspective of the protocol itself.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Providers, don’t touch my thing.</p><p>Automation/Rules without turn-off options are bad. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;&lt;p&gt;Link preview provided as a feature by webmail/clients such</summary>
      
    
    
    
    
    <category term="mutt" scheme="https://blog.zenithal.me/tags/mutt/"/>
    
    <category term="web" scheme="https://blog.zenithal.me/tags/web/"/>
    
    <category term="outlook" scheme="https://blog.zenithal.me/tags/outlook/"/>
    
    <category term="telegram" scheme="https://blog.zenithal.me/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>赶/敢PRE</title>
    <link href="https://blog.zenithal.me/2020/11/28/%E6%9C%80%E8%B5%B6-%E6%95%A2%E7%9A%84%E4%B8%80%E6%AC%A1PRE/"/>
    <id>https://blog.zenithal.me/2020/11/28/%E6%9C%80%E8%B5%B6-%E6%95%A2%E7%9A%84%E4%B8%80%E6%AC%A1PRE/</id>
    <published>2020-11-28T15:31:34.000Z</published>
    <updated>2020-11-28T15:47:52.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们组作为搞系统架构的，总是要看一些系统架构的文章；MICRO 这个会议作为搞微架构的会议，当然是入了老师法眼的，于是一段时间内的组会内容变成了 MICRO 20 文章选读。</p><p>这个选读，自然是同学们来做，当时我去得晚了一些，发现和我相关的文章都被选走了，然后其他的讲具体加速器设计的也没啥意思，做内存的和我也没啥关系，正愁选啥呢，然后就看到了最佳论文候选，一篇讲量子内存微架构的文章，看起来很有意思，于是我选了。</p><h1 id="摸鱼"><a href="#摸鱼" class="headerlink" title="摸鱼"></a>摸鱼</h1><p>但是啊，选了以后，我一直想看，但一直没空看，或者说没有找到可用的空来看，于是直接摸鱼到了PRE那天的前一天晚上。</p><h1 id="慌张"><a href="#慌张" class="headerlink" title="慌张"></a>慌张</h1><p>前一天晚上了，怎么办！</p><p>只能硬上呗。可惜我不懂量子计算机，这种东西看着头痛。还好学过一点量子计算，应该是能看的吧？</p><p>万幸的是，这篇文章的 Background 讲得相当足，然后图片相当有表现力，然后想法也非常直观，于是看的差不多了。</p><p>这时候已经是 PRE 那天早上4点，我想，slides 先不急，先出去吃个饭嘛。</p><h1 id="睡觉"><a href="#睡觉" class="headerlink" title="睡觉"></a>睡觉</h1><p>于是便利蜂走起！然后吃完以后觉得浑身舒服，于是滚回寝室睡觉，这时候是早上6点。</p><h1 id="一个小时！"><a href="#一个小时！" class="headerlink" title="一个小时！"></a>一个小时！</h1><p>然后起床，惊吓，中午12:20了！而组会在13:30，我 slide 还没动手呢！</p><p>于是我花了 10min 赶到地方，开始疯狂铺垫相关背景。</p><p>到 13:25 的时候，背景差不多了，该讲文章的主要贡献了，但没时间了！</p><p>于是我把两张图直接丢上去，各成一页，然后匆匆赶往目的地。</p><h1 id="坑蒙拐骗"><a href="#坑蒙拐骗" class="headerlink" title="坑蒙拐骗"></a>坑蒙拐骗</h1><p>幸好组里没什么人懂量子计算机，蒙混过关！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;我们组作为搞系统架构的，总是要看一些系统架构的文章；MICRO 这个会议作为搞微架构的会议，当然是入了老师法眼的，于是一段时间内的组会内容变</summary>
      
    
    
    
    
    <category term="daily" scheme="https://blog.zenithal.me/tags/daily/"/>
    
    <category term="academic" scheme="https://blog.zenithal.me/tags/academic/"/>
    
  </entry>
  
  <entry>
    <title>Tunight: About Mutt and About M1</title>
    <link href="https://blog.zenithal.me/2020/11/23/Tunight-About-Mutt-and-About-M1/"/>
    <id>https://blog.zenithal.me/2020/11/23/Tunight-About-Mutt-and-About-M1/</id>
    <published>2020-11-23T12:56:06.000Z</published>
    <updated>2020-11-23T13:02:10.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="似乎不是很成功"><a href="#似乎不是很成功" class="headerlink" title="似乎不是很成功"></a>似乎不是很成功</h1><p>听众很多，讲者很菜，demo很粗糙</p><p>简介，slides和录像都在 <a href="https://tuna.moe/event/2020/mutt/">https://tuna.moe/event/2020/mutt/</a> 中</p><h1 id="摸杰哥M1"><a href="#摸杰哥M1" class="headerlink" title="摸杰哥M1"></a>摸杰哥M1</h1><p>直接扔杰哥链接 <a href="https://jia.je/hardware/2020/11/19/arm-m1-macbookair/">https://jia.je/hardware/2020/11/19/arm-m1-macbookair/</a></p><p>感觉很 fancy</p><p>丽狼nb！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;似乎不是很成功&quot;&gt;&lt;a href=&quot;#似乎不是很成功&quot; class=&quot;headerlink&quot; title=&quot;似乎不是很成功&quot;&gt;&lt;/a&gt;似乎不是很成功&lt;/h1&gt;&lt;p&gt;听众很多，讲者很菜，demo很粗糙&lt;/p&gt;
&lt;p&gt;简介，slides和录像都在 &lt;a href=&quot;h</summary>
      
    
    
    
    
    <category term="mutt" scheme="https://blog.zenithal.me/tags/mutt/"/>
    
    <category term="daily" scheme="https://blog.zenithal.me/tags/daily/"/>
    
    <category term="tunight" scheme="https://blog.zenithal.me/tags/tunight/"/>
    
    <category term="jiegec" scheme="https://blog.zenithal.me/tags/jiegec/"/>
    
    <category term="apple" scheme="https://blog.zenithal.me/tags/apple/"/>
    
  </entry>
  
  <entry>
    <title>TUNA 成员参加开源软件供应链2020峰会</title>
    <link href="https://blog.zenithal.me/2020/11/18/TUNA-%E6%88%90%E5%91%98%E5%8F%82%E5%8A%A0%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE2020%E5%B3%B0%E4%BC%9A/"/>
    <id>https://blog.zenithal.me/2020/11/18/TUNA-%E6%88%90%E5%91%98%E5%8F%82%E5%8A%A0%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE2020%E5%B3%B0%E4%BC%9A/</id>
    <published>2020-11-18T05:48:11.000Z</published>
    <updated>2020-11-18T05:50:00.758Z</updated>
    
    <content type="html"><![CDATA[<p>参见 <a href="https://tuna.moe/blog/2020/iscas-conf/">tuna.moe</a> 主站</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参见 &lt;a href=&quot;https://tuna.moe/blog/2020/iscas-conf/&quot;&gt;tuna.moe&lt;/a&gt; 主站&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="daily" scheme="https://blog.zenithal.me/tags/daily/"/>
    
    <category term="tuna" scheme="https://blog.zenithal.me/tags/tuna/"/>
    
    <category term="travel" scheme="https://blog.zenithal.me/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>从 Signing Party 到年轻人的第一次 Revoke</title>
    <link href="https://blog.zenithal.me/2020/11/16/%E4%BB%8E-Signing-Party-%E5%88%B0%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1-Revoke/"/>
    <id>https://blog.zenithal.me/2020/11/16/%E4%BB%8E-Signing-Party-%E5%88%B0%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1-Revoke/</id>
    <published>2020-11-16T14:15:05.000Z</published>
    <updated>2020-11-19T12:28:06.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>在<a href="https://isrc.iscas.ac.cn/summer2020/">开源软件供应链2020峰会</a>的邀请下，以及<a href="https://tuna.moe/">TUNA</a>的派遣下，我与来自<a href="https://github.com/universaloj">UOJ</a>的两位同学<a href="https://t.me/Billchenchina">billchenchina</a>以及<a href="https://t.me/TechCiel">Ciel</a>面基，并举行了一次奇怪的signing party。</p><h1 id="举办-Signing-Party"><a href="#举办-Signing-Party" class="headerlink" title="举办 Signing Party"></a>举办 Signing Party</h1><p>首先我们交换了公钥，对照了公钥指纹。</p><p>然后我们验证了ID，无非是常规的身份证（如果 UID 中有实名的话），学生卡，以及其他ID。</p><p>以下步骤可以非面对面进行。</p><p>然后我们商议决定，除了要验证邮箱，我们还需要验证私钥的持有性，即验证各个私钥的功能性。</p><p>于是我们采取了以下握手方案：</p><ol><li>A 向 B 发送用 A 签名用 B 加密的「信息」，「信息」中包含发方与接收方邮箱，以及一些字符。（B 收到后即可验证 A 的 S 能力与邮箱的持有性）</li><li>B 将 「信息」附在其邮件中，以「—BEGIN RAW MESSAGE—」包裹，并增加B相关的一些字符，形成「信息二」，签名并加密，发送给 A 。（A 收到后可验证 B 的S，E以及邮箱的持有）</li><li>A 将 「信息二」附在邮件中，附上对 B 公钥的签名，并将加上字符形成「信息三」，签名加密后发给 B。（B 收到后可验证 A 的E，C，并收获签名）</li><li>B 将 「信息三」附在邮件中，附上对 A 公钥的签名，形成「信息四」，签名加密后发给 A。（A 收到后可验证B的C，并收获签名）</li></ol><p>上述方案对于一个 UID ，一组ES密钥的用户较为友好，对于多个 UID，多组ES密钥的用户，需要重复其中一些步骤才能进行下一步。</p><p>对于 A 密钥，我们并未验证，不过可以给一个中心服务器，上传各个人的公钥，只要验证其能登录上去，即可。</p><p>按签名的性质来说，我们只需要验证UID，也就是验证 ID 与邮箱与指纹即可完成 Signing Party 的前半段，后半段只需要交换签名。我们这次进行了一定的加强。</p><h1 id="出锅"><a href="#出锅" class="headerlink" title="出锅"></a>出锅</h1><p>在第三步时，我应该对 A 的公钥进行签名，然后发现我找不到我的主私钥了。</p><p>我导出的私钥显示为（使用 <code>pgpdump</code> ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Old: Secret Key Packet(tag 5)(277 bytes)</span><br><span class="line">        Ver 4 - new</span><br><span class="line">        Public key creation time - Wed May  1 17:54:39 CST 2019</span><br><span class="line">        Pub alg - RSA Encrypt or Sign(pub 1)</span><br><span class="line">        RSA n(2048 bits) - ...</span><br><span class="line">        RSA e(17 bits) - ...</span><br><span class="line">        Sym alg - Plaintext or unencrypted data(sym 0)</span><br><span class="line">        GnuPG gnu-dummy (s2k 1001)</span><br></pre></td></tr></table></figure><p>注意到，其只有 n 与 e，而没有其余参数，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Encrypted RSA d</span><br><span class="line">Encrypted RSA p</span><br><span class="line">Encrypted RSA q</span><br><span class="line">Encrypted RSA u</span><br></pre></td></tr></table></figure><p>回溯历史，发现当时我导出「主」私钥的参数为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9603  gpg --armor --export-secret-subkeys <span class="string">&#x27;23470D4FD461AA84!&#x27;</span></span><br><span class="line">9610  gpg --delete-secret-keys 23470D4FD461AA84</span><br></pre></td></tr></table></figure><p>其中 <code>23470D4FD461AA84</code> 为主钥的keyid，但由于命令是 <code>export-secret-subkeys</code>，在此keyid下找不到相应子密钥，所以导出来的私钥是空的，只有公钥与UID与一些签名。</p><p>所以在导出时应该注意！并查验导出私有钥匙的文件！可以通过 <code>pgpdump</code>，<code>gpg --show-keys file</code>，<code>gpg --list-packets file</code> 来查验。</p><h1 id="Revoke"><a href="#Revoke" class="headerlink" title="Revoke"></a>Revoke</h1><p>找不到私钥，但有预先生成的吊销证书，我于是将其挂载在公钥上后上传，成功吊销。</p><p>年轻人的第一次 Revoke。</p><h1 id="新公钥"><a href="#新公钥" class="headerlink" title="新公钥"></a>新公钥</h1><p>目前新公钥在 <a href="https://blog.zenithal.me/key">https://blog.zenithal.me/key</a> 中，其指纹为 <code>1127F188280AE3123619332987E17EEF9B18B6C9</code>。</p><p>由于进行过 UID 验证，重启握手后完成了 Signing Party。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://isrc.iscas.ac.cn/summer2020/&quot;&gt;开源软件供应链2020峰会&lt;</summary>
      
    
    
    
    
    <category term="mutt" scheme="https://blog.zenithal.me/tags/mutt/"/>
    
    <category term="pgp" scheme="https://blog.zenithal.me/tags/pgp/"/>
    
    <category term="daily" scheme="https://blog.zenithal.me/tags/daily/"/>
    
  </entry>
  
  <entry>
    <title>Mutt 配置：一种实践的部署方式</title>
    <link href="https://blog.zenithal.me/2020/10/11/Mutt-%E9%85%8D%E7%BD%AE%EF%BC%9A%E4%B8%80%E7%A7%8D%E5%AE%9E%E8%B7%B5%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
    <id>https://blog.zenithal.me/2020/10/11/Mutt-%E9%85%8D%E7%BD%AE%EF%BC%9A%E4%B8%80%E7%A7%8D%E5%AE%9E%E8%B7%B5%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</id>
    <published>2020-10-10T17:40:32.000Z</published>
    <updated>2020-10-10T18:04:15.108Z</updated>
    
    <content type="html"><![CDATA[<p>万事在命令行中完成，这是个美好的愿景，也是许多人的实践。</p><p>但当我们发现，连日常处理邮件都需要开一个网页或开一个图形化客户端才能完成，而没有可用的命令行客户端时，我们是失望的。</p><p>尤其是当我们需要对邮件进行自动化与控制，普通的图形化界面已经满足不了时，我们渴求着脚本，我们期望着管道。</p><p>而对一些对安全有需求的客户来说，加密与签名也必不可少，但这些工具的集成与支持程度做得非常糟糕。</p><p>为了解决该难题，一些人可能已经查过，找到了救命工具：Mutt！</p><p>但是，Mutt 的配置难度立即击败了他们，他们受挫了，又缩回了图形化邮件客户端。</p><p>为什么会这么难�这一方面有工具选项繁杂的问题，另一方面，邮件系统本身也是难的！而现代的信息系统中，邮件已经逐渐式微，大家对其的掌握已经不像以前的黑客那么熟练了，从而相关的介绍文章也少之甚少。</p><p>我们发现，互联网上的 Mutt 教程要么对 Mutt 特性大书特书，然后根据特性列举一些未组织的代码片段；要么就是简单示例，给些参数；要么就是大量枚举选项（Mutt自己的文档也是如此）。这些教程，要么让人不知如何下手，要么让人迷失在大量选项中，从而难以构建其一个最小的工作样例。</p><p>是的，我们所需要的就是一个最小工作样例，以此为基础，逐渐调参到我们喜欢的模样。这种反馈过程不必多言。</p><p>所以，我们从实践角度出发，给大家提供一个最小工作样例，先让整个流程部署起来、跑起来！然后再谈其他的配置。</p><p>配置文件与说明在这个地址中：<a href="https://github.com/ZenithalHourlyRate/muttrc">https://github.com/ZenithalHourlyRate/muttrc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;万事在命令行中完成，这是个美好的愿景，也是许多人的实践。&lt;/p&gt;
&lt;p&gt;但当我们发现，连日常处理邮件都需要开一个网页或开一个图形化客户端才能完成，而没有可用的命令行客户端时，我们是失望的。&lt;/p&gt;
&lt;p&gt;尤其是当我们需要对邮件进行自动化与控制，普通的图形化界面已经满足不了时</summary>
      
    
    
    
    
    <category term="mutt" scheme="https://blog.zenithal.me/tags/mutt/"/>
    
    <category term="configuration" scheme="https://blog.zenithal.me/tags/configuration/"/>
    
  </entry>
  
  <entry>
    <title>Across the Great Wall we can reach every corner in the world.</title>
    <link href="https://blog.zenithal.me/2020/10/10/Across-the-Great-Wall-we-can-reach-every-corner-in-the-world/"/>
    <id>https://blog.zenithal.me/2020/10/10/Across-the-Great-Wall-we-can-reach-every-corner-in-the-world/</id>
    <published>2020-10-09T16:01:17.000Z</published>
    <updated>2020-10-09T16:07:53.317Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
